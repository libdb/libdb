{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"libdb \u00b6 Easy Management and Creation of Database Based on JSON Format with High Speed and Optimized. Installation Install With pip in Windows Install With pip3 in Linux Install With Git Windows (python) Linux (python3) Usage Initializing the Database Creating a New Entry Bulk Creating Entries Updating an Entry Deleting an Entry Listing All Keys Clearing the Database Searching for Entries Running Tests Installation \u00b6 Install With pip in Windows: \u00b6 pip install libdb Install With pip3 in Linux: \u00b6 # if not installed pip3 sudo apt-get update&&sudo apt-get install python3-pip # Install With pip3 command pip3 install libdb Install With Git \u00b6 git clone https://github.com/libdb/libdb cd libdb Git Option\u2019s \u00b6 Windows (python) # Install Libdb in windows python install.py # Just upgrade libdb in windows python install.py upgrade Linux (python3) # Install Libdb in Linux python3 install.py # Just upgrade libdb in Linux python3 install.py upgrade Usage \u00b6 Here are some examples to demonstrate how to use the LibDB package. Initializing the Database: \u00b6 from libdb import JSONDatabase # Initialize the database db = JSONDatabase('mydb.json') Creating a New Entry \u00b6 db.create('name', 'Alice') print(db.read('name')) # Output: Alice Bulk Creating Entries \u00b6 items = { 'name': 'Alice', 'age': 30, 'city': 'Wonderland' } db.bulk_create(items) print(db.read('age')) # Output: 30 print(db.read('city')) # Output: Wonderland Updating an Entry \u00b6 db.update('name', 'Bob') print(db.read('name')) # Output: Bob Deleting an Entry \u00b6 db.delete('name') print(db.read('name')) # Output: None Listing All Keys \u00b6 list_keys = db.list_keys() print(list_keys) # Output: ['age', 'city'] Clearing the Database \u00b6 db.clear() print(db.list_keys()) # Output: [] Searching for Entries \u00b6 users = { 'user1': {'name': 'Alice', 'age': 30}, 'user2': {'name': 'Bob', 'age': 25}, 'user3': {'name': 'Charlie', 'age': 30} } db.bulk_create(users) result = db.search('age', 30) print(result) # Output: {'user1': {'name': 'Alice', 'age': 30}, 'user3': {'name': 'Charlie', 'age': 30}} Running Tests \u00b6 You can run the tests to ensure everything is working correctly: python -m unittest discover tests","title":"Home"},{"location":"#libdb","text":"Easy Management and Creation of Database Based on JSON Format with High Speed and Optimized. Installation Install With pip in Windows Install With pip3 in Linux Install With Git Windows (python) Linux (python3) Usage Initializing the Database Creating a New Entry Bulk Creating Entries Updating an Entry Deleting an Entry Listing All Keys Clearing the Database Searching for Entries Running Tests","title":"libdb"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-with-pip-in-windows","text":"pip install libdb","title":"Install With pip in Windows:"},{"location":"#install-with-pip3-in-linux","text":"# if not installed pip3 sudo apt-get update&&sudo apt-get install python3-pip # Install With pip3 command pip3 install libdb","title":"Install With pip3 in Linux:"},{"location":"#install-with-git","text":"git clone https://github.com/libdb/libdb cd libdb","title":"Install With Git"},{"location":"#git-options","text":"Windows (python) # Install Libdb in windows python install.py # Just upgrade libdb in windows python install.py upgrade Linux (python3) # Install Libdb in Linux python3 install.py # Just upgrade libdb in Linux python3 install.py upgrade","title":"Git Option&rsquo;s"},{"location":"#usage","text":"Here are some examples to demonstrate how to use the LibDB package.","title":"Usage"},{"location":"#initializing-the-database","text":"from libdb import JSONDatabase # Initialize the database db = JSONDatabase('mydb.json')","title":"Initializing the Database:"},{"location":"#creating-a-new-entry","text":"db.create('name', 'Alice') print(db.read('name')) # Output: Alice","title":"Creating a New Entry"},{"location":"#bulk-creating-entries","text":"items = { 'name': 'Alice', 'age': 30, 'city': 'Wonderland' } db.bulk_create(items) print(db.read('age')) # Output: 30 print(db.read('city')) # Output: Wonderland","title":"Bulk Creating Entries"},{"location":"#updating-an-entry","text":"db.update('name', 'Bob') print(db.read('name')) # Output: Bob","title":"Updating an Entry"},{"location":"#deleting-an-entry","text":"db.delete('name') print(db.read('name')) # Output: None","title":"Deleting an Entry"},{"location":"#listing-all-keys","text":"list_keys = db.list_keys() print(list_keys) # Output: ['age', 'city']","title":"Listing All Keys"},{"location":"#clearing-the-database","text":"db.clear() print(db.list_keys()) # Output: []","title":"Clearing the Database"},{"location":"#searching-for-entries","text":"users = { 'user1': {'name': 'Alice', 'age': 30}, 'user2': {'name': 'Bob', 'age': 25}, 'user3': {'name': 'Charlie', 'age': 30} } db.bulk_create(users) result = db.search('age', 30) print(result) # Output: {'user1': {'name': 'Alice', 'age': 30}, 'user3': {'name': 'Charlie', 'age': 30}}","title":"Searching for Entries"},{"location":"#running-tests","text":"You can run the tests to ensure everything is working correctly: python -m unittest discover tests","title":"Running Tests"}]}